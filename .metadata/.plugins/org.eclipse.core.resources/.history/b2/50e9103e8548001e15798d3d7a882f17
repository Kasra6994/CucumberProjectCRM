package steps;

import org.junit.Assert;
import org.openqa.selenium.support.PageFactory;

import io.cucumber.java.After;
import io.cucumber.java.Before;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import pages.AddBankAccountsPage;
import pages.AddCustomerPage;
import pages.CompaniesPage;
import pages.CustomerSummaryPage;
import pages.DashboardPage;
import pages.DataBasePage;
import pages.ListAccountsPage;
import pages.LoginPage;
import pages.TestBase;

public class StepDefinitions extends TestBase {

	LoginPage loginPage;
	DashboardPage dashboardPage;
	AddCustomerPage addCustomerPage;
	AddBankAccountsPage addBankAccountPage;
	DataBasePage databasePage;
	CustomerSummaryPage customerSummaryPage;
	ListAccountsPage listAccountsPage;
	CompaniesPage companiesPage;

	@Before
	public void setup() {

		init();
		loginPage = PageFactory.initElements(driver, LoginPage.class);
		dashboardPage = PageFactory.initElements(driver, DashboardPage.class);
		addCustomerPage = PageFactory.initElements(driver, AddCustomerPage.class);
		databasePage = new DataBasePage();
		customerSummaryPage = PageFactory.initElements(driver, CustomerSummaryPage.class);
		addBankAccountPage = PageFactory.initElements(driver, AddBankAccountsPage.class);
		listAccountsPage = PageFactory.initElements(driver, ListAccountsPage.class);
		companiesPage = PageFactory.initElements(driver, CompaniesPage.class);
	}

	@Given("User is on the Techfios login page")
	public void user_is_on_the_techfios_login_page() {

		driver.get("https://techfios.com/billing/?ng=admin/");
	}

	@When("User enters valid username as {string}")
	public void user_enters_valid_username_as(String username) {

		loginPage.enterUserName(username);
	}

	@When("User enters valid password as {string}")
	public void user_enters_valid_password_as(String password) {

		loginPage.enterPassword(password);
	}

	@When("User clicks on Sign in button")
	public void user_clicks_on_Sign_in_button() {

		loginPage.signIn();
	}

	@Then("User should succesfully login and land on the dashboard page")
	public void user_should_succesfully_login_and_land_on_the_dashboard_page() {

		String expectedTitle = "Dashboard- iBilling";
		String actualTitle = getTitle();
		Assert.assertEquals(expectedTitle, actualTitle);
		takeScreenshot(driver);
	}

	@When("User enters valid {string} from mysql database")
	public void user_enters_valid_from_mysql_database(String loginData) {
		if (loginData.equalsIgnoreCase("username")) {
			loginPage.enterUserName(databasePage.getDataFromDb("username"));
			System.out.println("username from DB: " + databasePage.getDataFromDb("username"));

		} else if (loginData.equalsIgnoreCase("password")) {
			loginPage.enterPassword(databasePage.getDataFromDb("password"));
			System.out.println("password from DB: " + databasePage.getDataFromDb("password"));
		} else {
			System.out.println("Unable to retrieve data");
		}

	}

	@When("User enters invalid username as {string}")
	public void user_enters_invalid_username_as(String username) {
		loginPage.enterUserName(username);
	}

	@When("User enters invalid password as {string}")
	public void user_enters_invalid_password_as(String password) {
		loginPage.enterPassword(password);
	}

	@Then("User should not be able to login")
	public void user_should_not_be_able_to_login() {
		loginPage.validateInvalidLogin();
	}

	@When("User clicks sign in button and lands on Dashboard Page")
	public void user_succesfully_login_and_land_on_DashboardPage() {
		loginPage.signIn();
		dashboardPage.validateDashboardPage();
	}

	@When("User enters the {string} in the {string} field")
	public void user_enters_the_in_the_field(String loginData, String field) {
		switch (field) {
		case "username":
			loginPage.enterUserName(loginData);
			break;
		case "password":
			loginPage.enterPassword(loginData);
			break;
		}
	}

	@Then("User should land on Dashboard page")
	public void user_should_land_on_Dashboard_page() {
		dashboardPage.validateDashboardPage();
	}

	@Then("User enters {string} in the {string} field in accounts page")
	public void user_enters_in_the_field_in_accounts_page(String accountsPageData, String field) {
		switch (field) {
		case "accountTitle":
			addBankAccountPage.enterAccountTitle(accountsPageData);
			break;
		case "description":
			addBankAccountPage.enterDescription(accountsPageData);
			break;
		case "initialBalance":
			addBankAccountPage.enterInitialBalance(accountsPageData);
			break;
		case "accountNumber":
			addBankAccountPage.enterAccountNumber(accountsPageData);
			break;
		case "contactPerson":
			addBankAccountPage.enterContactPerson(accountsPageData);
			break;
		case "Phone":
			addBankAccountPage.enterPhoneNumber(accountsPageData);
			break;
		case "internetBankingURL":
			addBankAccountPage.enterInternetBankingURL(accountsPageData);
			break;
		}

	}

	@When("User enters {string} in the {string} field in the add customer page")
	public void user_enters_in_the_field_in_the_add_customer_page(String addCustomerData, String field) {

		switch (field) {
		case "Full Name":
			addCustomerPage.enterFullName(addCustomerData);
			break;
		case "Email":
			addCustomerPage.enterEmail(addCustomerData);
			break;
		case "Phone":
			addCustomerPage.enterPhoneNumber(addCustomerData);
			break;
		case "Address":
			addCustomerPage.enterAddress(addCustomerData);
			break;
		case "City":
			addCustomerPage.enterCity(addCustomerData);
			break;
		case "State":
			addCustomerPage.enterState(addCustomerData);
			break;
		case "Zip":
			addCustomerPage.enterZip(addCustomerData);
			break;
		case "Password":
			addCustomerPage.enterPassword(addCustomerData);
			break;

		}

	}

	@When("User enters {string} in the {string} field in the companies page")
	public void user_enters_in_the_field_in_the_companies_page(String companyData, String field) {

		switch (field) {
		case "companyName":
			companiesPage.enterCompanyName(companyData);
			break;
		case "URL":
			companiesPage.enterCompanyUrl(companyData);
			break;
		case "email":
			companiesPage.enterCompanyEmail(companyData);
			break;
		case "phone":
			companiesPage.enterCompanyPhone(companyData);
			break;
		case "logoUrl":
			companiesPage.enterCompanylogoURL(companyData);
			break;
		}

	}

	@Then("User should be able to validate new company created succesfully")
	public void user_should_be_able_to_validate_new_company_created_succesfully() {

	}

	@When("User selects {string} in the {string} dropdown in the add customer page")
	public void user_selects_in_the_dropdown_in_the_add_customer_page(String addCustomerData, String dropdown) {

		switch (dropdown) {
		case "Company":
			addCustomerPage.selectCompany(addCustomerData);
			break;
		case "Country":
			addCustomerPage.selectCountry(addCustomerData);
			break;
		case "Currency":
			addCustomerPage.selectCurrency(addCustomerData);
			break;
		case "Group":
			addCustomerPage.selectGroup(addCustomerData);
		}

	}

	@When("User confirms {string} in the {string} field in the add customer page")
	public void user_confirms_in_the_field_in_the_add_customer_page(String password, String field) {
		switch (field) {
		case "Confirm Password":
			addCustomerPage.confirmPassword(password);
			break;
		}

	}

	@When("User clicks on {string}")
	public void user_clicks_on_button(String button) {
		switch (button) {
		case "login":
			loginPage.signIn();
			break;

		case "Customers":
			dashboardPage.clickCustomer();
			break;

		case "Add Customer":
			dashboardPage.clickAddCustomer();
			break;

		case "bankCash":
			dashboardPage.clickBankandCash();
			break;

		case "newAccount":
			dashboardPage.clickNewAccount();
			break;

		case "Save":
			addCustomerPage.submitContact();
			break;

		case "submit":
			addBankAccountPage.clickSubmit();
			break;

		case "Companies":
			dashboardPage.clickCompanies();
			break;

		case "New Company":
			companiesPage.clickAddCompany();
			break;

		case "save company":
			companiesPage.saveCompany();
			break;

		case "Transactions":
			dashboardPage.clickTransactions();
			break;

		case "New Deposit":
			dashboardPage.clickNewDeposit();
			break;

		case "Advanced":
			dashboardPage.clickAdvancedDepositOptions();
			break;
		}
	}

	@Then("User should be able to validate the Customer was created succesfully")
	public void user_should_be_able_to_validate_the_Customer_was_created_succesfully() {

		customerSummaryPage.validateSummaryPage();

	}

	@Then("User should be able to validate account created successfully")
	public void user_should_be_able_to_validate_account_created_successfully() {
		listAccountsPage.validateAccountSuccesfullyCreated();
	}

	@When("User selects {string} in the {string} dropdown")
	public void user_selects_in_the_dropdown(String visibleText, String dropdown) {

		switch (dropdown) {
		case "Account":
			dashboardPage.selectDepositAccount(visibleText);
			break;
		case "category":
			dashboardPage.selectDepositCategory(visibleText);
			break;
		case "payer":
			dashboardPage.selectDepositPayer(visibleText);
			break;
		case "paymentMethod":
			dashboardPage.selectDepositPayment(visibleText);
			break;
		}
	}

	
	@When("User attaches {string} in the {string} option")
	public void user_attaches_in_the_option(String file, String option) {
	   switch(option) {
	   case "attach file":
		   dashboardPage.attachDepositFile(file);
	   }
		
	}	
	
	@When("User enters {string} in the {string} field")
	public void user_enters_in_the_field(String data, String field) {
	   switch(field) {
	   case "amount":
		   dashboardPage.enterDepositAmount(data);
		   break;
	   case "ref":
		   dashboardPage.enterDepositRef(data);
		   break;
	   }
	}
	
	
	@Then("User should be able to validate deposit added succesfully")
	public void user_should_be_able_to_validate_deposit_added_succesfully() {
	    // Write code here that turns the phrase above into concrete actions
	    throw new io.cucumber.java.PendingException();
	}
	
	
	@After
	public void tearDown() {
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		driver.close();
		driver.quit();
	}
}
